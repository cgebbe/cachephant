[build-system]
build-backend = "pdm.backend"
requires = ["pdm-backend"]

[project]
authors = [
  {name = "Christian Gebbe", email = ""}
]
dependencies = [
  "pandas",
  "deepdiff",
  "fsspec",
  "BearDataClass",
  "SQLalchemy"
]
description = ""
license = {text = "MIT"}
name = "cachephant"
readme = "README.md"
requires-python = ">=3.11"
urls = {homepage = "https://github.com/cgebbe/cachephant"}
version = "0.2.1"

[tool.commitizen]
name = "cz_customize"
tag_format = "$version"
update_changelog_on_bump = true
version_provider = "pep621"
version_scheme = "pep440"

[tool.commitizen.customize]
# PROBLEM: commitizen only bumps version for BREAKING, feat, fix, refactor, perf
# SOLUTION: see  https://github.com/commitizen-tools/commitizen/issues/781#issuecomment-1790555405
bump_map = {feat = "MINOR", fix = "PATCH", ci = "PATCH", build = "PATCH", perf = "PATCH", refactor = "PATCH", 'chore' = "PATCH", 'style' = "PATCH", 'test' = "PATCH", 'docs' = "PATCH"}
bump_pattern = '^(feat|fix|ci|build|perf|refactor|chore|style|test|docs)'
schema_pattern = '^(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump|)(\(\S+\))?\:?\s.*'

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "assertpy",
  "toolz",
  "beardataclass",
  "fsspec.*",
  "deepdiff",
  "sqlalchemy"
]

[tool.pdm]
distribution = true

[tool.pdm.build]
excludes = ["**/*_test.py"]

[tool.pdm.dev-dependencies]
bump = [
  "commitizen"
]
check = [
  "mypy",
  "pandas-stubs",
  "sqlalchemy-stubs"
]
dev = [
  "ipython<8",  # Had some problems with prompt_toolkit otherwise...
  "ipykernel",
  "pudb",
  "pytest-pudb"
]
# from https://docs.astral.sh/ruff/configuration/
lint = [
  "pre-commit"
]
sqlalchemy2-stubs = []
test = [
  "pytest"
]

[tool.pdm.scripts]
all = {composite = ["lint", "check", "test"]}
check = "mypy src"
# FIXME: Add line ending to `dotenv` command and then add to all
dotenv = {shell = "sed 's/=.*/=/' .env > .env.example"}
lint = "pre-commit run --all-files"
test = "pytest -vv src"
publish.cmd = "pdm publish -v -r pypi -u __token__ -P ${PYPI_TOKEN}"
publish.env_file = ".env"

[tool.ruff]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Exclude a variety of commonly ignored directories.
exclude = [
  "tests/",
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv"
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
ignore = [
  "D",  # docstring related
  "ANN",  # type annotation related
  "TD",  # TODO comments
  "FIX",  # TODO comments
  "PD901",  # `df` is a bad variable name.
  "S301"  # `pickle` and modules that wrap it can be unsafe
]
indent-width = 4
# Same as Black.
line-length = 88
select = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

[tool.ruff.lint]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
ignore = [
  "D",  # pydocstyle
  "ANN",  # missing type annotations
  "T201",  # allow print
  "T203",  # allow pprint
  "TD",  # allow simple TODOs and FIXMEs
  "FIX",  # allow FIXMEs
  "S101",  # allow asserts
  "PD901",  # df is a bad variable name
  "G004"  # allow f-strings in logging
]
select = ["ALL"]
unfixable = []
